using System;
namespace Codejam
{
    public class FibCompleter
    {
        public static int complete(int[] numbers)
        {
            int indexOfMissingNumber = FibGeneratorValidator.indexOf(numbers);
            int missingDigit = -1;
            if (indexOfMissingNumber >= 3)
            {
                int[] generatedFibonacci = FibGeneratorValidator.generateFibonacci(numbers);
                for (int i = 0; i < generatedFibonacci.Length; i++)
                {
                    if (generatedFibonacci[i] != numbers[i] && i != indexOfMissingNumber)
                    {
                        return -1;
                    }
                }
                missingDigit = generatedFibonacci[indexOfMissingNumber];
            }
            else
            {
                numbers[indexOfMissingNumber] = numbers[3] - (FibGeneratorValidator.sumOfOtherTwoNumbers(numbers, indexOfMissingNumber));
                if (FibGeneratorValidator.validateFibonacci(numbers))
                {
                    missingDigit = numbers[indexOfMissingNumber];
                }
            }
            if (missingDigit > 0)
            {
                return missingDigit;
            }
            return -1;
        }
    }
    public class FibGeneratorValidator
    {
        public static bool validateFibonacci(int[] numbers)
        {
            bool valid = true;
            for (int i = 3; i < numbers.Length; i++)
            {
                if (numbers[i] != numbers[i - 1] + numbers[i - 2] + numbers[i - 3])
                {
                    valid = false;
                    break;
                }
            }
            return valid;
        }
        public static int[] generateFibonacci(int[] numbers)
        {
            int[] generated = new int[numbers.Length];
            generated[0] = numbers[0];
            generated[1] = numbers[1];
            generated[2] = numbers[2];
            for (int i = 3; i <generated.Length; i++)
            {
                generated[i] = generated[i - 1] + generated[i - 2] + generated[i - 3];
            }
            return generated;
        }
        public static int sumOfOtherTwoNumbers(int[] numbers, int i)
        {
            int sum = 0;
            for (int j = 0; j <= 2; j++)
            {
                if (j == i) { continue; }
                sum = sum + numbers[j];
            }
            return sum;
        }
        public static int indexOf(int[] numbers)
        {
            for (int i = 0; i < numbers.Length; i++)
            {
                if (numbers[i] == -1) { return i; }
            }
            return 0;
        }
    }
    class TriFibonacci
    {
        #region Testing code Do not change
        public static void Main(String[] args)
        {
            String input = Console.ReadLine();
            TriFibonacci triFibonacci = new TriFibonacci();
            do
            {
                string[] values = input.Split(',');
                int[] numbers = Array.ConvertAll<string, int>(values, delegate (string s) { return Int32.Parse(s); });
                int result = FibCompleter.complete(numbers);
                Console.WriteLine(result);
                input = Console.ReadLine();
            } while (input != "-1");
        }
        #endregion
    }

}
